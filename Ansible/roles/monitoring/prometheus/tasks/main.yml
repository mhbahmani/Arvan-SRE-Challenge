---
- name: install pre-requisites
  pip:
    name:
      - openshift
      - pyyaml
      - kubernetes 

- name: Create Prometheus ConfigMap
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: prometheus-config
        namespace: monitoring
      data:
        prometheus.yml: |
          global:
            scrape_interval: 23s
            scrape_timeout: 20s
          scrape_configs:
            - job_name: 'prometheus'
              scrape_interval: 5s
              static_configs:
                - targets: ["localhost:9090"]

            - job_name: 'kubernetes-kubelet'
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
              - role: node
              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc.cluster.local:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/${1}/proxy/metrics
        
            - job_name: etcd-servers
              honor_timestamps: true
              scrape_interval: 30s
              scrape_timeout: 20s
              metrics_path: /metrics
              scheme: http
              follow_redirects: true
              static_configs:
              - targets:
                - '10.232.161.51:2381'
                labels:
                  hostname: Master-01
        
            - job_name: 'kubernetes-kube-state'
              kubernetes_sd_configs:
              - role: pod
              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: kubernetes_pod_name
              - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]
                regex: .*true.*
                action: keep
              - source_labels: ['__meta_kubernetes_pod_label_daemon', '__meta_kubernetes_pod_node_name']
                regex: 'node-exporter;(.*)'
                action: replace
                target_label: nodename
            - job_name: 'node-exporters'
              static_configs:
                - targets:
                  - '10.232.161.51:9100'
                  - '10.232.161.101:9100'
                  - '10.232.161.111:9100'

            - job_name: 'applications-metrics'
              scrape_interval: 120s
              scrape_timeout: 60s
              kubernetes_sd_configs:
              - role: pod
              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              # - source_labels: [__meta_kubernetes_pod_label_service]
              #   regex: (dispatch|footprint|sms|routing)
              #   action: keep
              - source_labels: [__meta_kubernetes_namespace]
                regex: .*zeus.*
                action: keep
              - source_labels: [__meta_kubernetes_pod_container_port_name]
                regex: http-metrics
                action: keep

- name: Apply RBAC roles for Prometheus
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: prometheus
      rules:
        - apiGroups: [""]
          resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["extensions"]
          resources: ["ingresses"]
          verbs: ["get", "list", "watch"]
        - nonResourceURLs: ["/metrics"]
          verbs: ["get"]
- name: Apply RBAC roles for Prometheus
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: prometheus
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: prometheus
      subjects:
        - kind: ServiceAccount
          name: prometheus
          namespace: monitoring

- name: Create Prometheus ServiceAccount
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: prometheus
        namespace: monitoring

- name: Create StatefulSet for Prometheus with persistent storage
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: prometheus
        namespace: monitoring
      spec:
        serviceName: "prometheus"
        replicas: 1
        selector:
          matchLabels:
            app: prometheus
        template:
          metadata:
            labels:
              app: prometheus
          spec:
            serviceAccount: prometheus
            serviceAccountName: prometheus
            containers:
              - name: prometheus
                image: docker.arvancloud.ir/prom/prometheus
                imagePullPolicy: IfNotPresent
                args:
                  - "--config.file=/etc/prometheus/prometheus.yml"
                  - "--storage.tsdb.path=/prometheus/data"
                ports:
                  - containerPort: 9090
                volumeMounts:
                  - name: prometheus-config-volume
                    mountPath: /etc/prometheus
                  - name: prometheus-storage
                    mountPath: /prometheus/data
            volumes:
              - name: prometheus-config-volume
                configMap:
                  name: prometheus-config
              - name: prometheus-storage
                persistentVolumeClaim:
                  claimName: prometheus-pvc

- name: Create PersistentVolumeClaim for Prometheus
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: prometheus-pvc
        namespace: monitoring
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-path
        resources:
          requests:
            storage: 1Gi

- name: Expose Prometheus services
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus
        namespace: monitoring
      spec:
        selector:
          app: prometheus
        ports:
          - port: 9090
            targetPort: 9090
            protocol: TCP
        type: ClusterIP

- name: Create Ingress for Prometheus
  environment:
    K8S_AUTH_KUBECONFIG: /tmp/deployer-kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: prometheus-ingress
        namespace: monitoring
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
      spec:
        ingressClassName: traefik
        rules:
          - host: prometheus.arvan.mhbhm.ir
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: prometheus
                      port:
                        number: 9090
